/*
给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，
判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。\
如果可以构成，返回 true ；否则返回 false。

(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。)

注意：
你可以假设两个字符串均只含有小写字母。

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ransom-note
*/

//字符数组
public boolean canConstruct(String ransomNote, String magazine) {
    int[] table = new int[26];
    char[] m = magazine.toCharArray();
    char[] r = ransomNote.toCharArray();
    for (int i = 0; i < m.length; i++) {
        table[m[i] - 'a']++;
    }
    for (int i = 0; i < r.length; i++) {
        if (table[r[i] - 'a'] > 0) {
            table[r[i] - 'a']--;
        } else {
            return false;
        }
    }
    return true;
}

//给字符数组排序
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        char[] chars1 = ransomNote.toCharArray();
        char[] chars2 = magazine.toCharArray();
        Arrays.sort(chars1);
        Arrays.sort(chars2);
        int i = 0;
        int j = 0;
        while (i < chars1.length && j < chars2.length) {
            if (chars1[i] == chars2[j]) {
                i++;
                j++;
            } else {
                if (chars2[j] > chars1[i]) {
                    return false;
                }
                j++;
            }
        }
        if (i == chars1.length) {
            return true;
        } else {
            return false;
        }
    }
}

//哈希表
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        char[] chars1 = ransomNote.toCharArray();
        char[] chars2 = magazine.toCharArray();
        Arrays.sort(chars1);
        Arrays.sort(chars2);
        int i = 0;
        int j = 0;
        while (i < chars1.length && j < chars2.length) {
            if (chars1[i] == chars2[j]) {
                i++;
                j++;
            } else {
                if (chars2[j] > chars1[i]) {
                    return false;
                }
                j++;
            }
        }
        if (i == chars1.length) {
            return true;
        } else {
            return false;
        }
    }
}
