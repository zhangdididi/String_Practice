/*
给定两个字符串 A 和 B, 寻找重复叠加字符串A的最小次数，使得字符串B成为叠加后的字符串A的子串，如果不存在则返回 -1。

举个例子，A = "abcd"，B = "cdabcdab"。

答案为 3， 因为 A 重复叠加三遍后为 “abcdabcdabcd”，此时 B 是其子串；A 重复叠加两遍后为"abcdabcd"，B 并不是其子串。

注意:

 A 与 B 字符串的长度在1和10000区间范围内。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/repeated-string-match
*/

class Solution {
    public int repeatedStringMatch(String A, String B) {
        //将字符串转化为字符数组
        char[] charOfA = A.toCharArray();
        char[] charOfB = B.toCharArray();
        for (int i = 0; i < charOfA.length; i++) {
            if (charOfA[i] == charOfB[0]) {
                int k = i;
                //记录遍历字符串B的次数
                int count = 1;
                int j = 0;//从头遍历字符串B
                while (charOfA[k] == charOfB[j]) {
                    k++;
                    j++;
                    if (j >= charOfB.length) {
                        //遍历完B,就返回count
                        return count;
                    }
                    if (k >= charOfA.length) {
                        //k遍历完字符串A,说明不够匹配B
                        k = 0;
                        count++;
                    }
                }
            }
        }
        return -1;
    }
}
