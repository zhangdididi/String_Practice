/*
给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。
说明：本题中，我们将空字符串定义为有效的回文串。

示例 1:
输入: "A man, a plan, a canal: Panama"
输出: true

示例 2:
输入: "race a car"
输出: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-palindrome
*/

class Solution {
    public boolean isPalindrome(String s) {
        Set<Character> table = new HashSet<>();
        String str = "abcdefghijklmnopqrstuvwxyz0123456789";
        char[] chars = str.toCharArray();
        for (char c : chars) {
            table.add(c);
        }
        String temp = s.toLowerCase();
        int left = 0;
        int right = temp.length() - 1;
        while (left < right) {
            if (table.contains(temp.charAt(left)) && table.contains(temp.charAt(right))) {
                if (temp.charAt(left) != temp.charAt(right)) {
                    return false;
                }
                left++;
                right--;
            } else if (!table.contains(temp.charAt(left))) {
                left++;
            } else {
                right--;
            }
        }
        return true;
    }
}


class Solution {
    public boolean isPalindrome(String s) {
        char[] chars = s.toLowerCase().toCharArray();
        int left = 0, right = chars.length - 1;
        while (left < right) {
            if ((Character.isLetter(chars[left]) 
                    || Character.isDigit(chars[left])) 
                    && (Character.isLetter(chars[right]) 
                    || Character.isDigit(chars[right]))) {
                if (chars[left] != chars[right]) {
                    //如果左边和右边的字符不同，说明不是回文
                    return false;
                }
                left++;
                right--;
            } else if (!Character.isLetter(chars[left]) 
                    && !Character.isDigit(chars[left])) {
                    left++;
            } else if (!Character.isLetter(chars[right]) 
                    && !Character.isDigit(chars[right])) {
                    right--;
            }
        }  
        return true;      
    }
}
