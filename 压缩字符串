/*
给定一组字符，使用原地算法将其压缩。

压缩后的长度必须始终小于或等于原数组长度。

数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。

在完成原地修改输入数组后，返回数组的新长度。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-compression
*/

class Solution {
    public int compress(char[] chars) {
        int sum = 0;//记录不同字符的开始位置
        int cur = 0;
        int ret = 0;
        while (cur < chars.length && sum < chars.length) {
            int charNum = 1;//记录字符数量
            for (int i = sum; i < chars.length - 1; i++) {
                if (chars[i] == chars[i + 1]) {
                    charNum++;
                } else {
                    break;
                }
            }
            //在字符后加value值
            chars[cur++] = chars[sum];
            ++ret;
            sum += charNum;// 1
            if (charNum != 1) {
                int index = charNum;
                if (index > 0) {
                    if (index / 1000 > 0) {
                        chars[cur++] = (char) (index / 1000 + 48);
                        index %= 1000;
                        ret++;
                    }
                    if (charNum / 100 > 0) {
                        chars[cur++] = (char) (index / 100 + 48);
                        charNum %= 100;
                        ret++;
                    }
                    if (index / 10 > 0) {
                        chars[cur++] = (char) (index / 10 + 48);
                        index %= 10;
                        ret++;
                    }
                    chars[cur++] = (char) (index + 48);
                        ret++;
                }
            }
        }//end while
        return ret;
    }
}
