/*
给定一个段落 (paragraph) 和一个禁用单词列表 (banned)。
返回出现次数最多，同时不在禁用列表中的单词。
题目保证至少有一个词不在禁用列表中，而且答案唯一。

禁用列表中的单词用小写字母表示，不含标点符号。段落中的单词不区分大小写。答案都是小写字母。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/most-common-word
*/


class Solution {
    public String mostCommonWord(String paragraph, String[] banned) {
        Set<Character> setChar = new HashSet<>();
        char[] chars = new char[]{' ', '!', '?', '\'', ',', ';', '.'};
        for (char c : chars) {
            setChar.add(c);
        }
        Set<String> setString = new HashSet<>();
        for (String string : banned) {
            setString.add(string);
        }
        Map<String, Integer> map = new HashMap<>();
        int left = 0, right = 0;
        int max = 0;
        StringBuilder res = new StringBuilder("");
        char[] p = paragraph.toLowerCase().toCharArray();
        while (right < p.length) {
            while (left < p.length && setChar.contains(p[left])) {
                left++;
            }
            //left指向单词的第一个字符
            while (right < p.length && !setChar.contains(p[right])) {
                right++;
            }
            //right指向单词后的第一个非单词字母
            String s = paragraph.toLowerCase().substring(left, right);
            if (!setString.contains(s)) {
                int count = map.getOrDefault(s, 0);
                map.put(s, count + 1);
                if (map.get(s) > max) {
                    max = map.get(s);
                    res.replace(0, res.length(), s);
                }
            }
            left = right;
            while (right < p.length && setChar.contains(p[right])) {
                right++;
            }
        }//end while
        return res.toString();
    }
}
