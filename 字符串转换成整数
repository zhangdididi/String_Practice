/*
请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，
作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-to-integer-atoi
*/

class Solution {
    public int myAtoi(String str) {
        int res = 0;//存储转换的整数结果
        int flag = 1;//表示正负符号
        char[] chars = str.toCharArray();
        int curr = 0;
        for (; curr < chars.length; curr++) {
            if (chars[curr] == ' ') {
                continue;
            } else {
                if (chars[curr] == '-') {
                    flag = -1;
                    curr++;
                    break;
                } else if (chars[curr] == '+') {
                    curr++;
                    break;
                } else if (chars[curr] < '0' || chars[curr] > '9') {
                    return 0;
                } else {
                    break;
                }
            }
        }
        //循环结束，start找到数字的开头
        for (; curr < chars.length; curr++) {
            if (chars[curr] < '0' || chars[curr] > '9') {
                return res;
            }
            int carry = (chars[curr] - 48) * flag;
            if (res > Integer.MAX_VALUE / 10 || (res == Integer.MAX_VALUE / 10 && carry > 7)) {
                return Integer.MAX_VALUE;
            }
            if (res < Integer.MIN_VALUE / 10 || (res == Integer.MIN_VALUE / 10 && carry < -8)) {
                return Integer.MIN_VALUE;
            }
            res = res * 10 + carry;
        }
        return res;
    }
}
